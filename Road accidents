import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import plotly.graph_objects as go
import plotly.io as pio
import pickle

# Load dataset
data = pd.read_csv("Road.csv")

# Preprocessing
# Convert categorical variables to numerical using one-hot encoding
data = pd.get_dummies(data, columns=["Weather_Condition", "Road_Type"], drop_first=True)

# Define dependent and independent variables
X = data.drop("Accident_Severity", axis=1)  # Independent variables
y = data["Accident_Severity"]  # Dependent variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R2 Score: {r2}")

# Save the model
with open("road_accident_model.pkl", "wb") as file:
    pickle.dump(model, file)

# Generate interactive visualizations using Plotly

# 1. Scatter Plot: Actual vs Predicted
scatter_fig = go.Figure()
scatter_fig.add_trace(go.Scatter(
    x=y_test, y=y_pred, mode='markers', marker=dict(size=10, color='blue'),
    name='Actual vs Predicted'
)
scatter_fig.update_layout(
    title="Actual vs Predicted Accident Severity",
    xaxis_title="Actual Severity",
    yaxis_title="Predicted Severity"
)
pio.write_html(scatter_fig, file="actual_vs_predicted.html")

# 2. Residual Plot
residuals = y_test - y_pred
residual_fig = go.Figure()
residual_fig.add_trace(go.Scatter(
    x=y_pred, y=residuals, mode='markers', marker=dict(size=10, color='orange'),
    name='Residuals'
))
residual_fig.update_layout(
    title="Residual Plot",
    xaxis_title="Predicted Severity",
    yaxis_title="Residuals"
)
residual_fig.add_shape(
    type="line", line=dict(color="red", dash="dash"),
    x0=min(y_pred), x1=max(y_pred), y0=0, y1=0
)
pio.write_html(residual_fig, file="residual_plot.html")

# 3. Histogram: Predicted Severity Distribution
histogram_fig = go.Figure()
histogram_fig.add_trace(go.Histogram(
    x=y_pred, marker=dict(color='green'),
    name='Predicted Severity Distribution'
))
histogram_fig.update_layout(
    title="Distribution of Predicted Accident Severity",
    xaxis_title="Predicted Severity",
    yaxis_title="Frequency"
)
pio.write_html(histogram_fig, file="predicted_severity_distribution.html")

# Save results to HTML
results = f"""
<h1>Model Evaluation Results</h1>
<p>Mean Squared Error: {mse}</p>
<p>R2 Score: {r2}</p>
"""
with open("results.html", "w") as file:
    file.write(results)
