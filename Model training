import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import pickle

# Load dataset
data = pd.read_csv("Road.csv")

# Preprocessing
# Convert categorical variables to numerical using one-hot encoding
data = pd.get_dummies(data, columns=["Weather_Condition", "Road_Type"], drop_first=True)

# Define dependent and independent variables
X = data.drop("Accident_Severity", axis=1)  # Independent variables
y = data["Accident_Severity"]  # Dependent variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R2 Score: {r2}")

# Save the model
with open("road_accident_model.pkl", "wb") as file:
    pickle.dump(model, file)

# Plot actual vs predicted values
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Severity")
plt.ylabel("Predicted Severity")
plt.title("Actual vs Predicted Accident Severity")
plt.savefig("actual_vs_predicted.png")
plt.show()

# Plot predicted severity distribution
plt.hist(y_pred, bins=20)
plt.xlabel("Predicted Severity")
plt.ylabel("Frequency")
plt.title("Distribution of Predicted Accident Severity")
plt.savefig("predicted_severity_distribution.png")
plt.show()

# Plot residuals
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.xlabel("Predicted Severity")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.savefig("residual_plot.png")
plt.show()

# Save results to HTML
results = f"""
<h1>Model Evaluation Results</h1>
<p>Mean Squared Error: {mse}</p>
<p>R2 Score: {r2}</p>
"""
with open("results.html", "w") as file:
    file.write(results)
